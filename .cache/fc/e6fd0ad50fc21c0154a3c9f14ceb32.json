{"id":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","dependencies":[{"name":"/Users/hagereldakroury/Documents/projects/edam2json-demo/package.json","includedInParent":true,"mtime":1625081489671},{"name":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdfxml-streaming-parser/package.json","includedInParent":true,"mtime":1624342902792},{"name":"relative-to-absolute-iri","loc":{"line":3,"column":43},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/relative-to-absolute-iri/index.js"},{"name":"sax","loc":{"line":4,"column":22},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/sax/lib/sax.js"},{"name":"stream","loc":{"line":5,"column":25},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","resolved":"/opt/homebrew/lib/node_modules/parcel-bundler/node_modules/stream-browserify/index.js"},{"name":"./ParseError","loc":{"line":6,"column":29},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/ParseError.js"},{"name":"rdf-data-factory","loc":{"line":7,"column":35},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/index.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst sax_1 = require(\"sax\");\nconst stream_1 = require(\"stream\");\nconst ParseError_1 = require(\"./ParseError\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nclass RdfXmlParser extends stream_1.Transform {\n    constructor(args) {\n        super({ readableObjectMode: true });\n        this.activeTagStack = [];\n        this.nodeIds = {};\n        if (args) {\n            Object.assign(this, args);\n            this.options = args;\n        }\n        if (!this.dataFactory) {\n            this.dataFactory = new rdf_data_factory_1.DataFactory();\n        }\n        if (!this.baseIRI) {\n            this.baseIRI = '';\n        }\n        if (!this.defaultGraph) {\n            this.defaultGraph = this.dataFactory.defaultGraph();\n        }\n        this.saxStream = sax_1.createStream(this.strict, { xmlns: false, position: this.trackPosition });\n        // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n        if (!this.strict) {\n            this.saxStream._parser.looseCase = 'toString';\n        }\n        this.attachSaxListeners();\n    }\n    /**\n     * Parse the namespace of the given tag,\n     * and take into account the namespace of the parent tag that was already parsed.\n     * @param {Tag} tag A tag to parse the namespace from.\n     * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n     * @return {{[p: string]: string}[]} An array of namespaces,\n     *                                   where the last ones have a priority over the first ones.\n     */\n    static parseNamespace(tag, parentTag) {\n        const thisNs = {};\n        let hasNs = false;\n        for (const attributeKey in tag.attributes) {\n            if (attributeKey.startsWith('xmlns')) {\n                if (attributeKey.length === 5) {\n                    // Set default namespace\n                    hasNs = true;\n                    thisNs[''] = tag.attributes[attributeKey];\n                }\n                else if (attributeKey.charAt(5) === ':') {\n                    // Definition of a prefix\n                    hasNs = true;\n                    thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n                }\n            }\n        }\n        const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n        return hasNs ? parentNs.concat([thisNs]) : parentNs;\n    }\n    /**\n     * Expand the given term value based on the given namespaces.\n     * @param {string} term A term value.\n     * @param {{[p: string]: string}[]} ns An array of namespaces,\n     *                                     where the last ones have a priority over the first ones.\n     * @param {RdfXmlParser} parser The RDF/XML parser instance.\n     * @return {IExpandedPrefix} An expanded prefix object.\n     */\n    static expandPrefixedTerm(term, ns, parser) {\n        const colonIndex = term.indexOf(':');\n        let prefix;\n        let local;\n        if (colonIndex >= 0) {\n            // Prefix is set\n            prefix = term.substr(0, colonIndex);\n            local = term.substr(colonIndex + 1);\n        }\n        else {\n            // Prefix is not set, fallback to default namespace\n            prefix = '';\n            local = term;\n        }\n        let uri = null;\n        let defaultNamespace = null;\n        for (let i = ns.length - 1; i >= 0; i--) {\n            const nsElement = ns[i][prefix];\n            if (nsElement) {\n                uri = nsElement;\n                break;\n            }\n            else if (!defaultNamespace) {\n                defaultNamespace = ns[i][''];\n            }\n        }\n        if (!uri) {\n            // Error on unbound prefix\n            if (prefix && prefix !== 'xmlns') {\n                throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n            }\n            // Fallback to default namespace if no match was found\n            uri = defaultNamespace || '';\n        }\n        return { prefix, local, uri };\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return RdfXmlParser.IRI_REGEX.test(iri);\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new RdfXmlParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        try {\n            this.saxStream.write(chunk, encoding);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        callback();\n    }\n    /**\n     * Create a new parse error instance.\n     * @param {string} message An error message.\n     * @return {Error} An error instance.\n     */\n    newParseError(message) {\n        return new ParseError_1.ParseError(this, message);\n    }\n    /**\n     * Convert the given value to a IRI by taking into account the baseIRI.\n     *\n     * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n     *\n     * @param {string} value The value to convert to an IRI.\n     * @param {IActiveTag} activeTag The active tag.\n     * @return {NamedNode} an IRI.\n     */\n    valueToUri(value, activeTag) {\n        return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n    }\n    /**\n     * Convert the given value URI string to a named node.\n     *\n     * This throw an error if the URI is invalid.\n     *\n     * @param {string} uri A URI string.\n     * @return {NamedNode} a named node.\n     */\n    uriToNamedNode(uri) {\n        // Validate URI\n        if (!RdfXmlParser.isValidIri(uri)) {\n            throw this.newParseError(`Invalid URI: ${uri}`);\n        }\n        return this.dataFactory.namedNode(uri);\n    }\n    /**\n     * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n     * If it is invalid, an error will thrown emitted.\n     * @param {string} value A value.\n     */\n    validateNcname(value) {\n        // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n        if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n            throw this.newParseError(`Not a valid NCName: ${value}`);\n        }\n    }\n    attachSaxListeners() {\n        this.saxStream.on('error', (error) => this.emit('error', error));\n        this.saxStream.on('opentag', this.onTag.bind(this));\n        this.saxStream.on('text', this.onText.bind(this));\n        this.saxStream.on('closetag', this.onCloseTag.bind(this));\n        this.saxStream.on('doctype', this.onDoctype.bind(this));\n    }\n    /**\n     * Handle the given tag.\n     * @param {QualifiedTag} tag A SAX tag.\n     */\n    onTag(tag) {\n        // Get parent tag\n        const parentTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        let currentParseType = ParseType.RESOURCE;\n        if (parentTag) {\n            parentTag.hadChildren = true;\n            currentParseType = parentTag.childrenParseType;\n        }\n        // Check if this tag needs to be converted to a string\n        if (parentTag && parentTag.childrenStringTags) {\n            // Convert this tag to a string\n            const tagName = tag.name;\n            let attributes = '';\n            for (const attributeKey in tag.attributes) {\n                attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n            }\n            const tagContents = `${tagName}${attributes}`;\n            const tagString = `<${tagContents}>`;\n            parentTag.childrenStringTags.push(tagString);\n            // Inherit the array, so that deeper tags are appended to this same array\n            const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };\n            stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n            this.activeTagStack.push(stringActiveTag);\n            // Halt any further processing\n            return;\n        }\n        const activeTag = {};\n        if (parentTag) {\n            // Inherit language scope and baseIRI from parent\n            activeTag.language = parentTag.language;\n            activeTag.baseIRI = parentTag.baseIRI;\n        }\n        else {\n            activeTag.baseIRI = this.baseIRI;\n        }\n        this.activeTagStack.push(activeTag);\n        activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n        if (currentParseType === ParseType.RESOURCE) {\n            this.onTagResource(tag, activeTag, parentTag, !parentTag);\n        }\n        else { // currentParseType === ParseType.PROPERTY\n            this.onTagProperty(tag, activeTag, parentTag);\n        }\n    }\n    /**\n     * Handle the given node element in resource-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     * @param {boolean} rootTag If we are currently processing the root tag.\n     */\n    onTagResource(tag, activeTag, parentTag, rootTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.PROPERTY;\n        // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n        let typedNode = true;\n        if (tagExpanded.uri === RdfXmlParser.RDF) {\n            // Check forbidden property element names\n            if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n                throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n            }\n            switch (tagExpanded.local) {\n                case 'RDF':\n                    // Tags under <rdf:RDF> must always be resources\n                    activeTag.childrenParseType = ParseType.RESOURCE;\n                case 'Description':\n                    typedNode = false;\n            }\n        }\n        const predicates = [];\n        const objects = [];\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubjectValue = null;\n        let claimSubjectNodeId = false;\n        let subjectValueBlank = false;\n        let explicitType = null;\n        for (const attributeKey in tag.attributes) {\n            const attributeValue = tag.attributes[attributeKey];\n            const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n            if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (attributeKeyExpanded.local) {\n                    case 'about':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        activeSubjectValue = attributeValue;\n                        continue;\n                    case 'ID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = '#' + attributeValue;\n                        claimSubjectNodeId = true;\n                        continue;\n                    case 'nodeID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = attributeValue;\n                        subjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'type':\n                        // Emit the rdf:type later as named node instead of the default literal\n                        explicitType = attributeValue;\n                        continue;\n                    case 'aboutEach':\n                        throw this.newParseError(`rdf:aboutEach is not supported.`);\n                    case 'aboutEachPrefix':\n                        throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n                    case 'li':\n                        throw this.newParseError(`rdf:li on node elements are not supported.`);\n                }\n            }\n            else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n                if (attributeKeyExpanded.local === 'lang') {\n                    activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n                    continue;\n                }\n                else if (attributeKeyExpanded.local === 'base') {\n                    // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n                    activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n                    continue;\n                }\n            }\n            // Interpret attributes at this point as properties on this node,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n                predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n                objects.push(attributeValue);\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubjectValue !== null) {\n            activeTag.subject = subjectValueBlank\n                ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n            if (claimSubjectNodeId) {\n                this.claimNodeId(activeTag.subject);\n            }\n        }\n        // Force the creation of a subject if it doesn't exist yet\n        if (!activeTag.subject) {\n            activeTag.subject = this.dataFactory.blankNode();\n        }\n        // Emit the type if we're at a typed node\n        if (typedNode) {\n            const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n        }\n        if (parentTag) {\n            // If the parent tag defined a predicate, add the current tag as property value\n            if (parentTag.predicate) {\n                if (parentTag.childrenCollectionSubject) {\n                    // RDF:List-based properties\n                    const linkTerm = this.dataFactory.blankNode();\n                    // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n                    this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);\n                    // Emit <current-chain> <rdf:first> value\n                    this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId);\n                    // Store <current-chain> in the parent node\n                    parentTag.childrenCollectionSubject = linkTerm;\n                    parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n                }\n                else { // !parentTag.predicateEmitted\n                    // Set-based properties\n                    this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);\n                    // Emit pending properties on the parent tag that had no defined subject yet.\n                    for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n                        this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n                    }\n                    // Cleanup so we don't emit them again when the parent tag is closed\n                    parentTag.predicateSubPredicates = [];\n                    parentTag.predicateSubObjects = [];\n                    parentTag.predicateEmitted = true;\n                }\n            }\n            // Emit all collected triples\n            for (let i = 0; i < predicates.length; i++) {\n                const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n                this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n            }\n            // Emit the rdf:type as named node instead of literal\n            if (explicitType) {\n                this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n            }\n        }\n    }\n    /**\n     * Handle the given property element in property-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     */\n    onTagProperty(tag, activeTag, parentTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.RESOURCE;\n        activeTag.subject = parentTag.subject; // Inherit parent subject\n        if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n            // Convert rdf:li to rdf:_x\n            if (!parentTag.listItemCounter) {\n                parentTag.listItemCounter = 1;\n            }\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n        }\n        else {\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n        }\n        // Check forbidden property element names\n        if (tagExpanded.uri === RdfXmlParser.RDF\n            && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n            throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n        }\n        activeTag.predicateSubPredicates = [];\n        activeTag.predicateSubObjects = [];\n        let parseType = false;\n        let attributedProperty = false;\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubSubjectValue = null;\n        let subSubjectValueBlank = true;\n        const predicates = [];\n        const objects = [];\n        for (const propertyAttributeKey in tag.attributes) {\n            const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n            const propertyAttributeKeyExpanded = RdfXmlParser\n                .expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n            if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (propertyAttributeKeyExpanded.local) {\n                    case 'resource':\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n                        }\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = false;\n                        continue;\n                    case 'datatype':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n                        }\n                        activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n                        continue;\n                    case 'nodeID':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (activeTag.hadChildren) {\n                            throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n                        }\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'parseType':\n                        // Validation\n                        if (attributedProperty) {\n                            throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n                        }\n                        if (activeTag.datatype) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n                        }\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n                        }\n                        if (propertyAttributeValue === 'Resource') {\n                            parseType = true;\n                            activeTag.childrenParseType = ParseType.PROPERTY;\n                            // Turn this property element into a node element\n                            const nestedBNode = this.dataFactory.blankNode();\n                            this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n                            activeTag.subject = nestedBNode;\n                            activeTag.predicate = null;\n                        }\n                        else if (propertyAttributeValue === 'Collection') {\n                            parseType = true;\n                            // Interpret children as being part of an rdf:List\n                            activeTag.hadChildren = true;\n                            activeTag.childrenCollectionSubject = activeTag.subject;\n                            activeTag.childrenCollectionPredicate = activeTag.predicate;\n                            subSubjectValueBlank = false;\n                        }\n                        else if (propertyAttributeValue === 'Literal') {\n                            parseType = true;\n                            // Interpret children as being part of a literal string\n                            activeTag.childrenTagsToString = true;\n                            activeTag.childrenStringTags = [];\n                        }\n                        continue;\n                    case 'ID':\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n                        this.claimNodeId(activeTag.reifiedStatementId);\n                        continue;\n                }\n            }\n            else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML\n                && propertyAttributeKeyExpanded.local === 'lang') {\n                activeTag.language = propertyAttributeValue === ''\n                    ? null : propertyAttributeValue.toLowerCase();\n                continue;\n            }\n            // Interpret attributes at this point as properties via implicit blank nodes on the property,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns'\n                && propertyAttributeKeyExpanded.uri) {\n                if (parseType || activeTag.datatype) {\n                    throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n                }\n                activeTag.hadChildren = true;\n                attributedProperty = true;\n                predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n                objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubSubjectValue !== null) {\n            const subjectParent = activeTag.subject;\n            activeTag.subject = subSubjectValueBlank\n                ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n            this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);\n            // Emit our buffered triples\n            for (let i = 0; i < predicates.length; i++) {\n                this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n            }\n            activeTag.predicateEmitted = true;\n        }\n        else if (subSubjectValueBlank) {\n            // The current property element has no defined subject\n            // Let's buffer the properties until the child node defines a subject,\n            // or if the tag closes.\n            activeTag.predicateSubPredicates = predicates;\n            activeTag.predicateSubObjects = objects;\n            activeTag.predicateEmitted = false;\n        }\n    }\n    /**\n     * Emit the given triple to the stream.\n     * @param {Term} subject A subject term.\n     * @param {Term} predicate A predicate term.\n     * @param {Term} object An object term.\n     * @param {Term} statementId An optional resource that identifies the triple.\n     *                           If truthy, then the given triple will also be emitted reified.\n     */\n    emitTriple(subject, predicate, object, statementId) {\n        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));\n        // Reify triple\n        if (statementId) {\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n        }\n    }\n    /**\n     * Register the given term as a node ID.\n     * If one was already registered, this will emit an error.\n     *\n     * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n     * @param {Term} term An RDF term.\n     */\n    claimNodeId(term) {\n        if (!this.allowDuplicateRdfIds) {\n            if (this.nodeIds[term.value]) {\n                throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n            }\n            this.nodeIds[term.value] = true;\n        }\n    }\n    /**\n     * Handle the given text string.\n     * @param {string} text A parsed text string.\n     */\n    onText(text) {\n        const activeTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        if (activeTag) {\n            if (activeTag.childrenStringTags) {\n                activeTag.childrenStringTags.push(text);\n            }\n            else if (activeTag.predicate) {\n                activeTag.text = text;\n            }\n        }\n    }\n    /**\n     * Handle the closing of the last tag.\n     */\n    onCloseTag() {\n        const poppedTag = this.activeTagStack.pop();\n        // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n        if (poppedTag.childrenStringEmitClosingTag) {\n            poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n        }\n        // Set the literal value if we were collecting XML tags to string\n        if (poppedTag.childrenTagsToString) {\n            poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n            poppedTag.text = poppedTag.childrenStringTags.join('');\n            poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n        }\n        if (poppedTag.childrenCollectionSubject) {\n            // Terminate the rdf:List\n            this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n        }\n        else if (poppedTag.predicate) {\n            if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n                // Property element contains text\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n            }\n            else if (!poppedTag.predicateEmitted) {\n                // Emit remaining properties on an anonymous property element\n                const subject = this.dataFactory.blankNode();\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n                for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n                    this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n                }\n            }\n        }\n    }\n    /**\n     * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n     * @param {string} doctype The read doctype.\n     */\n    onDoctype(doctype) {\n        doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n            this.saxStream._parser.ENTITIES[prefix] = uri;\n            return '';\n        });\n    }\n}\nexports.RdfXmlParser = RdfXmlParser;\n// Regex for valid IRIs\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n    xml: RdfXmlParser.XML,\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'li',\n    'aboutEach',\n    'aboutEachPrefix',\n];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [\n    'Description',\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'aboutEach',\n    'aboutEachPrefix',\n];\n// tslint:disable-next-line:max-line-length\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n(function (ParseType) {\n    ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n    ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":370,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":371,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":372,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":373,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":374,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":375,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":376,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":377,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":378,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":379,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":380,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":381,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":382,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":383,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":384,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":385,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":386,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":387,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":388,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":389,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":390,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":391,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":392,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":393,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":394,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":395,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":396,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":397,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":398,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":399,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":400,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":401,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":402,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":403,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":404,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":405,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":406,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":407,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":408,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":409,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":410,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":411,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":412,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":413,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":414,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":415,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":416,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":417,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":418,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":419,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":420,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":421,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":422,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":423,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":424,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":425,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":426,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":427,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":428,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":429,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":430,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":431,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":432,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":433,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":434,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":435,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":436,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":437,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":438,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":439,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":440,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":441,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":442,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":443,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":444,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":445,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":446,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":447,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":448,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":449,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":450,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":451,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":452,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":453,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":454,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":455,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":456,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":457,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":458,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":459,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":460,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":461,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":462,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":463,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":464,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":465,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":466,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":467,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":468,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":469,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":470,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":471,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":472,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":473,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":474,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":475,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":476,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":477,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":478,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":479,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":480,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":481,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":482,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":483,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":484,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":485,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":486,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":487,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":488,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":489,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":490,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":491,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":492,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":493,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":494,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":495,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":496,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":497,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":498,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":499,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":500,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":501,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":502,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":503,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":504,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":505,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":506,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":507,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":508,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":509,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":510,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":511,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":512,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":513,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":514,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":515,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":516,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":517,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":518,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":519,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":520,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":521,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":522,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":523,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":524,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":525,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":526,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":527,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":528,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":529,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":530,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":531,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":532,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":533,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":534,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":535,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":536,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":537,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":538,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":539,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":540,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":541,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":542,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":543,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":544,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":545,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":546,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":547,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":548,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":549,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":550,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":551,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":552,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":553,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":554,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":555,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":556,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":557,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":558,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":559,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":560,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":561,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":562,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":563,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":564,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":565,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":566,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":567,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":568,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":569,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":570,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":571,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":572,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":573,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":574,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":575,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":576,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":577,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":578,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":579,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":580,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":581,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":582,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":583,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":584,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":585,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":586,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":587,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":588,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":589,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":590,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":591,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":592,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":593,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":594,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":595,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":596,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":597,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":598,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":599,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":600,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":601,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":602,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":603,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":604,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":605,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":606,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":607,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":608,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":609,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":610,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":611,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":612,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":613,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":614,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":615,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":616,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":617,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":618,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":619,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":620,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":621,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":622,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":623,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":624,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":625,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":626,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":627,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":628,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":629,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":630,"column":0},"generated":{"line":630,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":631,"column":0},"generated":{"line":631,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":632,"column":0},"generated":{"line":632,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":633,"column":0},"generated":{"line":633,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":634,"column":0},"generated":{"line":634,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":635,"column":0},"generated":{"line":635,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":636,"column":0},"generated":{"line":636,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":637,"column":0},"generated":{"line":637,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":638,"column":0},"generated":{"line":638,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":639,"column":0},"generated":{"line":639,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":640,"column":0},"generated":{"line":640,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":641,"column":0},"generated":{"line":641,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":642,"column":0},"generated":{"line":642,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":643,"column":0},"generated":{"line":643,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":644,"column":0},"generated":{"line":644,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":645,"column":0},"generated":{"line":645,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":646,"column":0},"generated":{"line":646,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":647,"column":0},"generated":{"line":647,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":648,"column":0},"generated":{"line":648,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":649,"column":0},"generated":{"line":649,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":650,"column":0},"generated":{"line":650,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":651,"column":0},"generated":{"line":651,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":652,"column":0},"generated":{"line":652,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":653,"column":0},"generated":{"line":653,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":654,"column":0},"generated":{"line":654,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":655,"column":0},"generated":{"line":655,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":656,"column":0},"generated":{"line":656,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":657,"column":0},"generated":{"line":657,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":658,"column":0},"generated":{"line":658,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":659,"column":0},"generated":{"line":659,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":660,"column":0},"generated":{"line":660,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":661,"column":0},"generated":{"line":661,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":662,"column":0},"generated":{"line":662,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":663,"column":0},"generated":{"line":663,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":664,"column":0},"generated":{"line":664,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":665,"column":0},"generated":{"line":665,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":666,"column":0},"generated":{"line":666,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":667,"column":0},"generated":{"line":667,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":668,"column":0},"generated":{"line":668,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":669,"column":0},"generated":{"line":669,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":670,"column":0},"generated":{"line":670,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":671,"column":0},"generated":{"line":671,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":672,"column":0},"generated":{"line":672,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":673,"column":0},"generated":{"line":673,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":674,"column":0},"generated":{"line":674,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":675,"column":0},"generated":{"line":675,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":676,"column":0},"generated":{"line":676,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":677,"column":0},"generated":{"line":677,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":678,"column":0},"generated":{"line":678,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":679,"column":0},"generated":{"line":679,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":680,"column":0},"generated":{"line":680,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":681,"column":0},"generated":{"line":681,"column":0}},{"source":"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js","original":{"line":682,"column":0},"generated":{"line":682,"column":0}}],"sources":{"node_modules/edam2json/node_modules/rdfxml-streaming-parser/lib/RdfXmlParser.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst relative_to_absolute_iri_1 = require(\"relative-to-absolute-iri\");\nconst sax_1 = require(\"sax\");\nconst stream_1 = require(\"stream\");\nconst ParseError_1 = require(\"./ParseError\");\nconst rdf_data_factory_1 = require(\"rdf-data-factory\");\nclass RdfXmlParser extends stream_1.Transform {\n    constructor(args) {\n        super({ readableObjectMode: true });\n        this.activeTagStack = [];\n        this.nodeIds = {};\n        if (args) {\n            Object.assign(this, args);\n            this.options = args;\n        }\n        if (!this.dataFactory) {\n            this.dataFactory = new rdf_data_factory_1.DataFactory();\n        }\n        if (!this.baseIRI) {\n            this.baseIRI = '';\n        }\n        if (!this.defaultGraph) {\n            this.defaultGraph = this.dataFactory.defaultGraph();\n        }\n        this.saxStream = sax_1.createStream(this.strict, { xmlns: false, position: this.trackPosition });\n        // Workaround for an issue in SAX where non-strict mode either lower- or upper-cases all tags.\n        if (!this.strict) {\n            this.saxStream._parser.looseCase = 'toString';\n        }\n        this.attachSaxListeners();\n    }\n    /**\n     * Parse the namespace of the given tag,\n     * and take into account the namespace of the parent tag that was already parsed.\n     * @param {Tag} tag A tag to parse the namespace from.\n     * @param {IActiveTag} parentTag The parent tag, or null if this tag is the root.\n     * @return {{[p: string]: string}[]} An array of namespaces,\n     *                                   where the last ones have a priority over the first ones.\n     */\n    static parseNamespace(tag, parentTag) {\n        const thisNs = {};\n        let hasNs = false;\n        for (const attributeKey in tag.attributes) {\n            if (attributeKey.startsWith('xmlns')) {\n                if (attributeKey.length === 5) {\n                    // Set default namespace\n                    hasNs = true;\n                    thisNs[''] = tag.attributes[attributeKey];\n                }\n                else if (attributeKey.charAt(5) === ':') {\n                    // Definition of a prefix\n                    hasNs = true;\n                    thisNs[attributeKey.substr(6)] = tag.attributes[attributeKey];\n                }\n            }\n        }\n        const parentNs = parentTag && parentTag.ns ? parentTag.ns : [RdfXmlParser.DEFAULT_NS];\n        return hasNs ? parentNs.concat([thisNs]) : parentNs;\n    }\n    /**\n     * Expand the given term value based on the given namespaces.\n     * @param {string} term A term value.\n     * @param {{[p: string]: string}[]} ns An array of namespaces,\n     *                                     where the last ones have a priority over the first ones.\n     * @param {RdfXmlParser} parser The RDF/XML parser instance.\n     * @return {IExpandedPrefix} An expanded prefix object.\n     */\n    static expandPrefixedTerm(term, ns, parser) {\n        const colonIndex = term.indexOf(':');\n        let prefix;\n        let local;\n        if (colonIndex >= 0) {\n            // Prefix is set\n            prefix = term.substr(0, colonIndex);\n            local = term.substr(colonIndex + 1);\n        }\n        else {\n            // Prefix is not set, fallback to default namespace\n            prefix = '';\n            local = term;\n        }\n        let uri = null;\n        let defaultNamespace = null;\n        for (let i = ns.length - 1; i >= 0; i--) {\n            const nsElement = ns[i][prefix];\n            if (nsElement) {\n                uri = nsElement;\n                break;\n            }\n            else if (!defaultNamespace) {\n                defaultNamespace = ns[i][''];\n            }\n        }\n        if (!uri) {\n            // Error on unbound prefix\n            if (prefix && prefix !== 'xmlns') {\n                throw new ParseError_1.ParseError(parser, `The prefix '${prefix}' in term '${term}' was not bound.`);\n            }\n            // Fallback to default namespace if no match was found\n            uri = defaultNamespace || '';\n        }\n        return { prefix, local, uri };\n    }\n    /**\n     * Check if the given IRI is valid.\n     * @param {string} iri A potential IRI.\n     * @return {boolean} If the given IRI is valid.\n     */\n    static isValidIri(iri) {\n        return RdfXmlParser.IRI_REGEX.test(iri);\n    }\n    /**\n     * Parses the given text stream into a quad stream.\n     * @param {NodeJS.EventEmitter} stream A text stream.\n     * @return {RDF.Stream} A quad stream.\n     */\n    import(stream) {\n        const output = new stream_1.PassThrough({ readableObjectMode: true });\n        stream.on('error', (error) => parsed.emit('error', error));\n        stream.on('data', (data) => output.push(data));\n        stream.on('end', () => output.push(null));\n        const parsed = output.pipe(new RdfXmlParser(this.options));\n        return parsed;\n    }\n    _transform(chunk, encoding, callback) {\n        try {\n            this.saxStream.write(chunk, encoding);\n        }\n        catch (e) {\n            return callback(e);\n        }\n        callback();\n    }\n    /**\n     * Create a new parse error instance.\n     * @param {string} message An error message.\n     * @return {Error} An error instance.\n     */\n    newParseError(message) {\n        return new ParseError_1.ParseError(this, message);\n    }\n    /**\n     * Convert the given value to a IRI by taking into account the baseIRI.\n     *\n     * This will follow the RDF/XML spec for converting values with baseIRIs to a IRI.\n     *\n     * @param {string} value The value to convert to an IRI.\n     * @param {IActiveTag} activeTag The active tag.\n     * @return {NamedNode} an IRI.\n     */\n    valueToUri(value, activeTag) {\n        return this.uriToNamedNode(relative_to_absolute_iri_1.resolve(value, activeTag.baseIRI));\n    }\n    /**\n     * Convert the given value URI string to a named node.\n     *\n     * This throw an error if the URI is invalid.\n     *\n     * @param {string} uri A URI string.\n     * @return {NamedNode} a named node.\n     */\n    uriToNamedNode(uri) {\n        // Validate URI\n        if (!RdfXmlParser.isValidIri(uri)) {\n            throw this.newParseError(`Invalid URI: ${uri}`);\n        }\n        return this.dataFactory.namedNode(uri);\n    }\n    /**\n     * Validate the given value as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n     * If it is invalid, an error will thrown emitted.\n     * @param {string} value A value.\n     */\n    validateNcname(value) {\n        // Validate term as an NCName: https://www.w3.org/TR/xml-names/#NT-NCName\n        if (!RdfXmlParser.NCNAME_MATCHER.test(value)) {\n            throw this.newParseError(`Not a valid NCName: ${value}`);\n        }\n    }\n    attachSaxListeners() {\n        this.saxStream.on('error', (error) => this.emit('error', error));\n        this.saxStream.on('opentag', this.onTag.bind(this));\n        this.saxStream.on('text', this.onText.bind(this));\n        this.saxStream.on('closetag', this.onCloseTag.bind(this));\n        this.saxStream.on('doctype', this.onDoctype.bind(this));\n    }\n    /**\n     * Handle the given tag.\n     * @param {QualifiedTag} tag A SAX tag.\n     */\n    onTag(tag) {\n        // Get parent tag\n        const parentTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        let currentParseType = ParseType.RESOURCE;\n        if (parentTag) {\n            parentTag.hadChildren = true;\n            currentParseType = parentTag.childrenParseType;\n        }\n        // Check if this tag needs to be converted to a string\n        if (parentTag && parentTag.childrenStringTags) {\n            // Convert this tag to a string\n            const tagName = tag.name;\n            let attributes = '';\n            for (const attributeKey in tag.attributes) {\n                attributes += ` ${attributeKey}=\"${tag.attributes[attributeKey]}\"`;\n            }\n            const tagContents = `${tagName}${attributes}`;\n            const tagString = `<${tagContents}>`;\n            parentTag.childrenStringTags.push(tagString);\n            // Inherit the array, so that deeper tags are appended to this same array\n            const stringActiveTag = { childrenStringTags: parentTag.childrenStringTags };\n            stringActiveTag.childrenStringEmitClosingTag = `</${tagName}>`;\n            this.activeTagStack.push(stringActiveTag);\n            // Halt any further processing\n            return;\n        }\n        const activeTag = {};\n        if (parentTag) {\n            // Inherit language scope and baseIRI from parent\n            activeTag.language = parentTag.language;\n            activeTag.baseIRI = parentTag.baseIRI;\n        }\n        else {\n            activeTag.baseIRI = this.baseIRI;\n        }\n        this.activeTagStack.push(activeTag);\n        activeTag.ns = RdfXmlParser.parseNamespace(tag, parentTag);\n        if (currentParseType === ParseType.RESOURCE) {\n            this.onTagResource(tag, activeTag, parentTag, !parentTag);\n        }\n        else { // currentParseType === ParseType.PROPERTY\n            this.onTagProperty(tag, activeTag, parentTag);\n        }\n    }\n    /**\n     * Handle the given node element in resource-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     * @param {boolean} rootTag If we are currently processing the root tag.\n     */\n    onTagResource(tag, activeTag, parentTag, rootTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.PROPERTY;\n        // Assume that the current node is a _typed_ node (2.13), unless we find an rdf:Description as node name\n        let typedNode = true;\n        if (tagExpanded.uri === RdfXmlParser.RDF) {\n            // Check forbidden property element names\n            if (!rootTag && RdfXmlParser.FORBIDDEN_NODE_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n                throw this.newParseError(`Illegal node element name: ${tagExpanded.local}`);\n            }\n            switch (tagExpanded.local) {\n                case 'RDF':\n                    // Tags under <rdf:RDF> must always be resources\n                    activeTag.childrenParseType = ParseType.RESOURCE;\n                case 'Description':\n                    typedNode = false;\n            }\n        }\n        const predicates = [];\n        const objects = [];\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubjectValue = null;\n        let claimSubjectNodeId = false;\n        let subjectValueBlank = false;\n        let explicitType = null;\n        for (const attributeKey in tag.attributes) {\n            const attributeValue = tag.attributes[attributeKey];\n            const attributeKeyExpanded = RdfXmlParser.expandPrefixedTerm(attributeKey, activeTag.ns, this);\n            if (parentTag && attributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (attributeKeyExpanded.local) {\n                    case 'about':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        activeSubjectValue = attributeValue;\n                        continue;\n                    case 'ID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = '#' + attributeValue;\n                        claimSubjectNodeId = true;\n                        continue;\n                    case 'nodeID':\n                        if (activeSubjectValue) {\n                            throw this.newParseError(`Only one of rdf:about, rdf:nodeID and rdf:ID can be present, \\\nwhile ${attributeValue} and ${activeSubjectValue} where found.`);\n                        }\n                        this.validateNcname(attributeValue);\n                        activeSubjectValue = attributeValue;\n                        subjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'type':\n                        // Emit the rdf:type later as named node instead of the default literal\n                        explicitType = attributeValue;\n                        continue;\n                    case 'aboutEach':\n                        throw this.newParseError(`rdf:aboutEach is not supported.`);\n                    case 'aboutEachPrefix':\n                        throw this.newParseError(`rdf:aboutEachPrefix is not supported.`);\n                    case 'li':\n                        throw this.newParseError(`rdf:li on node elements are not supported.`);\n                }\n            }\n            else if (attributeKeyExpanded.uri === RdfXmlParser.XML) {\n                if (attributeKeyExpanded.local === 'lang') {\n                    activeTag.language = attributeValue === '' ? null : attributeValue.toLowerCase();\n                    continue;\n                }\n                else if (attributeKeyExpanded.local === 'base') {\n                    // SAX Parser does not expand xml:base, based on DOCTYPE, so we have to do it manually\n                    activeTag.baseIRI = relative_to_absolute_iri_1.resolve(attributeValue, activeTag.baseIRI);\n                    continue;\n                }\n            }\n            // Interpret attributes at this point as properties on this node,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (attributeKeyExpanded.prefix !== 'xml' && attributeKeyExpanded.uri) {\n                predicates.push(this.uriToNamedNode(attributeKeyExpanded.uri + attributeKeyExpanded.local));\n                objects.push(attributeValue);\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubjectValue !== null) {\n            activeTag.subject = subjectValueBlank\n                ? this.dataFactory.blankNode(activeSubjectValue) : this.valueToUri(activeSubjectValue, activeTag);\n            if (claimSubjectNodeId) {\n                this.claimNodeId(activeTag.subject);\n            }\n        }\n        // Force the creation of a subject if it doesn't exist yet\n        if (!activeTag.subject) {\n            activeTag.subject = this.dataFactory.blankNode();\n        }\n        // Emit the type if we're at a typed node\n        if (typedNode) {\n            const type = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n            this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), type, parentTag ? parentTag.reifiedStatementId : null);\n        }\n        if (parentTag) {\n            // If the parent tag defined a predicate, add the current tag as property value\n            if (parentTag.predicate) {\n                if (parentTag.childrenCollectionSubject) {\n                    // RDF:List-based properties\n                    const linkTerm = this.dataFactory.blankNode();\n                    // Emit <x> <p> <current-chain> OR <previous-chain> <rdf:rest> <current-chain>\n                    this.emitTriple(parentTag.childrenCollectionSubject, parentTag.childrenCollectionPredicate, linkTerm, parentTag.reifiedStatementId);\n                    // Emit <current-chain> <rdf:first> value\n                    this.emitTriple(linkTerm, this.dataFactory.namedNode(RdfXmlParser.RDF + 'first'), activeTag.subject, activeTag.reifiedStatementId);\n                    // Store <current-chain> in the parent node\n                    parentTag.childrenCollectionSubject = linkTerm;\n                    parentTag.childrenCollectionPredicate = this.dataFactory.namedNode(RdfXmlParser.RDF + 'rest');\n                }\n                else { // !parentTag.predicateEmitted\n                    // Set-based properties\n                    this.emitTriple(parentTag.subject, parentTag.predicate, activeTag.subject, parentTag.reifiedStatementId);\n                    // Emit pending properties on the parent tag that had no defined subject yet.\n                    for (let i = 0; i < parentTag.predicateSubPredicates.length; i++) {\n                        this.emitTriple(activeTag.subject, parentTag.predicateSubPredicates[i], parentTag.predicateSubObjects[i], null);\n                    }\n                    // Cleanup so we don't emit them again when the parent tag is closed\n                    parentTag.predicateSubPredicates = [];\n                    parentTag.predicateSubObjects = [];\n                    parentTag.predicateEmitted = true;\n                }\n            }\n            // Emit all collected triples\n            for (let i = 0; i < predicates.length; i++) {\n                const object = this.dataFactory.literal(objects[i], activeTag.datatype || activeTag.language);\n                this.emitTriple(activeTag.subject, predicates[i], object, parentTag.reifiedStatementId);\n            }\n            // Emit the rdf:type as named node instead of literal\n            if (explicitType) {\n                this.emitTriple(activeTag.subject, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.uriToNamedNode(explicitType), null);\n            }\n        }\n    }\n    /**\n     * Handle the given property element in property-mode.\n     * @param {QualifiedTag} tag A SAX tag.\n     * @param {IActiveTag} activeTag The currently active tag.\n     * @param {IActiveTag} parentTag The parent tag or null.\n     */\n    onTagProperty(tag, activeTag, parentTag) {\n        const tagExpanded = RdfXmlParser.expandPrefixedTerm(tag.name, activeTag.ns, this);\n        activeTag.childrenParseType = ParseType.RESOURCE;\n        activeTag.subject = parentTag.subject; // Inherit parent subject\n        if (tagExpanded.uri === RdfXmlParser.RDF && tagExpanded.local === 'li') {\n            // Convert rdf:li to rdf:_x\n            if (!parentTag.listItemCounter) {\n                parentTag.listItemCounter = 1;\n            }\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + '_' + parentTag.listItemCounter++);\n        }\n        else {\n            activeTag.predicate = this.uriToNamedNode(tagExpanded.uri + tagExpanded.local);\n        }\n        // Check forbidden property element names\n        if (tagExpanded.uri === RdfXmlParser.RDF\n            && RdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS.indexOf(tagExpanded.local) >= 0) {\n            throw this.newParseError(`Illegal property element name: ${tagExpanded.local}`);\n        }\n        activeTag.predicateSubPredicates = [];\n        activeTag.predicateSubObjects = [];\n        let parseType = false;\n        let attributedProperty = false;\n        // Collect all attributes as triples\n        // Assign subject value only after all attributes have been processed, because baseIRI may change the final val\n        let activeSubSubjectValue = null;\n        let subSubjectValueBlank = true;\n        const predicates = [];\n        const objects = [];\n        for (const propertyAttributeKey in tag.attributes) {\n            const propertyAttributeValue = tag.attributes[propertyAttributeKey];\n            const propertyAttributeKeyExpanded = RdfXmlParser\n                .expandPrefixedTerm(propertyAttributeKey, activeTag.ns, this);\n            if (propertyAttributeKeyExpanded.uri === RdfXmlParser.RDF) {\n                switch (propertyAttributeKeyExpanded.local) {\n                    case 'resource':\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`Found both rdf:resource (${propertyAttributeValue}) and rdf:nodeID (${activeSubSubjectValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:resource (${propertyAttributeValue})`);\n                        }\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = false;\n                        continue;\n                    case 'datatype':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:datatype (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${propertyAttributeValue})`);\n                        }\n                        activeTag.datatype = this.valueToUri(propertyAttributeValue, activeTag);\n                        continue;\n                    case 'nodeID':\n                        if (attributedProperty) {\n                            throw this.newParseError(`Found both non-rdf:* property attributes and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (activeTag.hadChildren) {\n                            throw this.newParseError(`Found both rdf:resource and rdf:nodeID (${propertyAttributeValue}).`);\n                        }\n                        if (parseType) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID (${propertyAttributeValue})`);\n                        }\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.hadChildren = true;\n                        activeSubSubjectValue = propertyAttributeValue;\n                        subSubjectValueBlank = true;\n                        continue;\n                    case 'bagID':\n                        throw this.newParseError(`rdf:bagID is not supported.`);\n                    case 'parseType':\n                        // Validation\n                        if (attributedProperty) {\n                            throw this.newParseError(`rdf:parseType is not allowed when non-rdf:* property attributes are present`);\n                        }\n                        if (activeTag.datatype) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:datatype (${activeTag.datatype.value})`);\n                        }\n                        if (activeSubSubjectValue) {\n                            throw this.newParseError(`rdf:parseType is not allowed on property elements with rdf:nodeID or rdf:resource (${activeSubSubjectValue})`);\n                        }\n                        if (propertyAttributeValue === 'Resource') {\n                            parseType = true;\n                            activeTag.childrenParseType = ParseType.PROPERTY;\n                            // Turn this property element into a node element\n                            const nestedBNode = this.dataFactory.blankNode();\n                            this.emitTriple(activeTag.subject, activeTag.predicate, nestedBNode, activeTag.reifiedStatementId);\n                            activeTag.subject = nestedBNode;\n                            activeTag.predicate = null;\n                        }\n                        else if (propertyAttributeValue === 'Collection') {\n                            parseType = true;\n                            // Interpret children as being part of an rdf:List\n                            activeTag.hadChildren = true;\n                            activeTag.childrenCollectionSubject = activeTag.subject;\n                            activeTag.childrenCollectionPredicate = activeTag.predicate;\n                            subSubjectValueBlank = false;\n                        }\n                        else if (propertyAttributeValue === 'Literal') {\n                            parseType = true;\n                            // Interpret children as being part of a literal string\n                            activeTag.childrenTagsToString = true;\n                            activeTag.childrenStringTags = [];\n                        }\n                        continue;\n                    case 'ID':\n                        this.validateNcname(propertyAttributeValue);\n                        activeTag.reifiedStatementId = this.valueToUri('#' + propertyAttributeValue, activeTag);\n                        this.claimNodeId(activeTag.reifiedStatementId);\n                        continue;\n                }\n            }\n            else if (propertyAttributeKeyExpanded.uri === RdfXmlParser.XML\n                && propertyAttributeKeyExpanded.local === 'lang') {\n                activeTag.language = propertyAttributeValue === ''\n                    ? null : propertyAttributeValue.toLowerCase();\n                continue;\n            }\n            // Interpret attributes at this point as properties via implicit blank nodes on the property,\n            // but we ignore attributes that have no prefix or known expanded URI\n            if (propertyAttributeKeyExpanded.prefix !== 'xml' && propertyAttributeKeyExpanded.prefix !== 'xmlns'\n                && propertyAttributeKeyExpanded.uri) {\n                if (parseType || activeTag.datatype) {\n                    throw this.newParseError(`Found illegal rdf:* properties on property element with attribute: ${propertyAttributeValue}`);\n                }\n                activeTag.hadChildren = true;\n                attributedProperty = true;\n                predicates.push(this.uriToNamedNode(propertyAttributeKeyExpanded.uri + propertyAttributeKeyExpanded.local));\n                objects.push(this.dataFactory.literal(propertyAttributeValue, activeTag.datatype || activeTag.language));\n            }\n        }\n        // Create the subject value _after_ all attributes have been processed\n        if (activeSubSubjectValue !== null) {\n            const subjectParent = activeTag.subject;\n            activeTag.subject = subSubjectValueBlank\n                ? this.dataFactory.blankNode(activeSubSubjectValue) : this.valueToUri(activeSubSubjectValue, activeTag);\n            this.emitTriple(subjectParent, activeTag.predicate, activeTag.subject, activeTag.reifiedStatementId);\n            // Emit our buffered triples\n            for (let i = 0; i < predicates.length; i++) {\n                this.emitTriple(activeTag.subject, predicates[i], objects[i], null);\n            }\n            activeTag.predicateEmitted = true;\n        }\n        else if (subSubjectValueBlank) {\n            // The current property element has no defined subject\n            // Let's buffer the properties until the child node defines a subject,\n            // or if the tag closes.\n            activeTag.predicateSubPredicates = predicates;\n            activeTag.predicateSubObjects = objects;\n            activeTag.predicateEmitted = false;\n        }\n    }\n    /**\n     * Emit the given triple to the stream.\n     * @param {Term} subject A subject term.\n     * @param {Term} predicate A predicate term.\n     * @param {Term} object An object term.\n     * @param {Term} statementId An optional resource that identifies the triple.\n     *                           If truthy, then the given triple will also be emitted reified.\n     */\n    emitTriple(subject, predicate, object, statementId) {\n        this.push(this.dataFactory.quad(subject, predicate, object, this.defaultGraph));\n        // Reify triple\n        if (statementId) {\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'type'), this.dataFactory.namedNode(RdfXmlParser.RDF + 'Statement'), this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'subject'), subject, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'predicate'), predicate, this.defaultGraph));\n            this.push(this.dataFactory.quad(statementId, this.dataFactory.namedNode(RdfXmlParser.RDF + 'object'), object, this.defaultGraph));\n        }\n    }\n    /**\n     * Register the given term as a node ID.\n     * If one was already registered, this will emit an error.\n     *\n     * This is used to check duplicate occurrences of rdf:ID in scope of the baseIRI.\n     * @param {Term} term An RDF term.\n     */\n    claimNodeId(term) {\n        if (!this.allowDuplicateRdfIds) {\n            if (this.nodeIds[term.value]) {\n                throw this.newParseError(`Found multiple occurrences of rdf:ID='${term.value}'.`);\n            }\n            this.nodeIds[term.value] = true;\n        }\n    }\n    /**\n     * Handle the given text string.\n     * @param {string} text A parsed text string.\n     */\n    onText(text) {\n        const activeTag = this.activeTagStack.length\n            ? this.activeTagStack[this.activeTagStack.length - 1] : null;\n        if (activeTag) {\n            if (activeTag.childrenStringTags) {\n                activeTag.childrenStringTags.push(text);\n            }\n            else if (activeTag.predicate) {\n                activeTag.text = text;\n            }\n        }\n    }\n    /**\n     * Handle the closing of the last tag.\n     */\n    onCloseTag() {\n        const poppedTag = this.activeTagStack.pop();\n        // If we were converting a tag to a string, and the tag was not self-closing, close it here.\n        if (poppedTag.childrenStringEmitClosingTag) {\n            poppedTag.childrenStringTags.push(poppedTag.childrenStringEmitClosingTag);\n        }\n        // Set the literal value if we were collecting XML tags to string\n        if (poppedTag.childrenTagsToString) {\n            poppedTag.datatype = this.dataFactory.namedNode(RdfXmlParser.RDF + 'XMLLiteral');\n            poppedTag.text = poppedTag.childrenStringTags.join('');\n            poppedTag.hadChildren = false; // Force a literal triple to be emitted hereafter\n        }\n        if (poppedTag.childrenCollectionSubject) {\n            // Terminate the rdf:List\n            this.emitTriple(poppedTag.childrenCollectionSubject, poppedTag.childrenCollectionPredicate, this.dataFactory.namedNode(RdfXmlParser.RDF + 'nil'), poppedTag.reifiedStatementId);\n        }\n        else if (poppedTag.predicate) {\n            if (!poppedTag.hadChildren && poppedTag.childrenParseType !== ParseType.PROPERTY) {\n                // Property element contains text\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, this.dataFactory.literal(poppedTag.text || '', poppedTag.datatype || poppedTag.language), poppedTag.reifiedStatementId);\n            }\n            else if (!poppedTag.predicateEmitted) {\n                // Emit remaining properties on an anonymous property element\n                const subject = this.dataFactory.blankNode();\n                this.emitTriple(poppedTag.subject, poppedTag.predicate, subject, poppedTag.reifiedStatementId);\n                for (let i = 0; i < poppedTag.predicateSubPredicates.length; i++) {\n                    this.emitTriple(subject, poppedTag.predicateSubPredicates[i], poppedTag.predicateSubObjects[i], null);\n                }\n            }\n        }\n    }\n    /**\n     * Fetch local DOCTYPE ENTITY's and make the parser recognise them.\n     * @param {string} doctype The read doctype.\n     */\n    onDoctype(doctype) {\n        doctype.replace(/<!ENTITY\\s+([^\\s]+)\\s+[\"']([^\"']+)[\"']\\s*>/g, (match, prefix, uri) => {\n            this.saxStream._parser.ENTITIES[prefix] = uri;\n            return '';\n        });\n    }\n}\nexports.RdfXmlParser = RdfXmlParser;\n// Regex for valid IRIs\nRdfXmlParser.IRI_REGEX = /^([A-Za-z][A-Za-z0-9+-.]*):[^ \"<>{}|\\\\\\[\\]`]*$/;\nRdfXmlParser.MIME_TYPE = 'application/rdf+xml';\nRdfXmlParser.RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#';\nRdfXmlParser.XML = 'http://www.w3.org/XML/1998/namespace';\nRdfXmlParser.XMLNS = 'http://www.w3.org/2000/xmlns/';\nRdfXmlParser.DEFAULT_NS = {\n    xml: RdfXmlParser.XML,\n};\nRdfXmlParser.FORBIDDEN_NODE_ELEMENTS = [\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'li',\n    'aboutEach',\n    'aboutEachPrefix',\n];\nRdfXmlParser.FORBIDDEN_PROPERTY_ELEMENTS = [\n    'Description',\n    'RDF',\n    'ID',\n    'about',\n    'bagID',\n    'parseType',\n    'resource',\n    'nodeID',\n    'aboutEach',\n    'aboutEachPrefix',\n];\n// tslint:disable-next-line:max-line-length\nRdfXmlParser.NCNAME_MATCHER = /^([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_])([A-Za-z\\xC0-\\xD6\\xD8-\\xF6\\u{F8}-\\u{2FF}\\u{370}-\\u{37D}\\u{37F}-\\u{1FFF}\\u{200C}-\\u{200D}\\u{2070}-\\u{218F}\\u{2C00}-\\u{2FEF}\\u{3001}-\\u{D7FF}\\u{F900}-\\u{FDCF}\\u{FDF0}-\\u{FFFD}\\u{10000}-\\u{EFFFF}_\\-.0-9#xB7\\u{0300}-\\u{036F}\\u{203F}-\\u{2040}])*$/u;\nvar ParseType;\n(function (ParseType) {\n    ParseType[ParseType[\"RESOURCE\"] = 0] = \"RESOURCE\";\n    ParseType[ParseType[\"PROPERTY\"] = 1] = \"PROPERTY\";\n})(ParseType = exports.ParseType || (exports.ParseType = {}));\n"},"lineCount":682}},"error":null,"hash":"d1916b78a3275798e7fb064a3cd63337","cacheData":{"env":{}}}
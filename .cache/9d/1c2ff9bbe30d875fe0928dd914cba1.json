{"id":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","dependencies":[{"name":"/Users/hagereldakroury/Documents/projects/edam2json-demo/package.json","includedInParent":true,"mtime":1625081489671},{"name":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/relative-to-absolute-iri/package.json","includedInParent":true,"mtime":1624342902788}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}}],"sources":{"node_modules/edam2json/node_modules/relative-to-absolute-iri/lib/Resolve.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * Convert the given relative IRI to an absolute IRI\n * by taking into account the given optional baseIRI.\n *\n * @param {string} relativeIRI The relative IRI to convert to an absolute IRI.\n * @param {string} baseIRI The optional base IRI.\n * @return {string} an absolute IRI.\n */\nfunction resolve(relativeIRI, baseIRI) {\n    baseIRI = baseIRI || '';\n    const baseFragmentPos = baseIRI.indexOf('#');\n    // Ignore any fragments in the base IRI\n    if (baseFragmentPos > 0) {\n        baseIRI = baseIRI.substr(0, baseFragmentPos);\n    }\n    // Convert empty value directly to base IRI\n    if (!relativeIRI.length) {\n        // At this point, the baseIRI MUST be absolute, otherwise we error\n        if (baseIRI.indexOf(':') < 0) {\n            throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n        }\n        return baseIRI;\n    }\n    // If the value starts with a query character, concat directly (but strip the existing query)\n    if (relativeIRI.startsWith('?')) {\n        const baseQueryPos = baseIRI.indexOf('?');\n        if (baseQueryPos > 0) {\n            baseIRI = baseIRI.substr(0, baseQueryPos);\n        }\n        return baseIRI + relativeIRI;\n    }\n    // If the value starts with a fragment character, concat directly\n    if (relativeIRI.startsWith('#')) {\n        return baseIRI + relativeIRI;\n    }\n    // Ignore baseIRI if it is empty\n    if (!baseIRI.length) {\n        const relativeColonPos = relativeIRI.indexOf(':');\n        if (relativeColonPos < 0) {\n            throw new Error(`Found invalid relative IRI '${relativeIRI}' for a missing baseIRI`);\n        }\n        return removeDotSegmentsOfPath(relativeIRI, relativeColonPos);\n    }\n    // Ignore baseIRI if the value is absolute\n    const valueColonPos = relativeIRI.indexOf(':');\n    if (valueColonPos >= 0) {\n        return removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // At this point, the baseIRI MUST be absolute, otherwise we error\n    const baseColonPos = baseIRI.indexOf(':');\n    if (baseColonPos < 0) {\n        throw new Error(`Found invalid baseIRI '${baseIRI}' for value '${relativeIRI}'`);\n    }\n    const baseIRIScheme = baseIRI.substr(0, baseColonPos + 1);\n    // Inherit the baseIRI scheme if the value starts with '//'\n    if (relativeIRI.indexOf('//') === 0) {\n        return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n    }\n    // Check cases where '://' occurs in the baseIRI, and where there is no '/' after a ':' anymore.\n    let baseSlashAfterColonPos;\n    if (baseIRI.indexOf('//', baseColonPos) === baseColonPos + 1) {\n        // If there is no additional '/' after the '//'.\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 3);\n        if (baseSlashAfterColonPos < 0) {\n            // If something other than a '/' follows the '://', append the value after a '/',\n            // otherwise, prefix the value with only the baseIRI scheme.\n            if (baseIRI.length > baseColonPos + 3) {\n                return baseIRI + '/' + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n            else {\n                return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n            }\n        }\n    }\n    else {\n        // If there is not even a single '/' after the ':'\n        baseSlashAfterColonPos = baseIRI.indexOf('/', baseColonPos + 1);\n        if (baseSlashAfterColonPos < 0) {\n            // If we don't have a '/' after the ':',\n            // prefix the value with only the baseIRI scheme.\n            return baseIRIScheme + removeDotSegmentsOfPath(relativeIRI, valueColonPos);\n        }\n    }\n    // If the value starts with a '/', then prefix it with everything before the first effective slash of the base IRI.\n    if (relativeIRI.indexOf('/') === 0) {\n        return baseIRI.substr(0, baseSlashAfterColonPos) + removeDotSegments(relativeIRI);\n    }\n    let baseIRIPath = baseIRI.substr(baseSlashAfterColonPos);\n    const baseIRILastSlashPos = baseIRIPath.lastIndexOf('/');\n    // Ignore everything after the last '/' in the baseIRI path\n    if (baseIRILastSlashPos >= 0 && baseIRILastSlashPos < baseIRIPath.length - 1) {\n        baseIRIPath = baseIRIPath.substr(0, baseIRILastSlashPos + 1);\n        // Also remove the first character of the relative path if it starts with '.' (and not '..' or './')\n        // This change is only allowed if there is something else following the path\n        if (relativeIRI[0] === '.' && relativeIRI[1] !== '.' && relativeIRI[1] !== '/' && relativeIRI[2]) {\n            relativeIRI = relativeIRI.substr(1);\n        }\n    }\n    // Prefix the value with the baseIRI path where\n    relativeIRI = baseIRIPath + relativeIRI;\n    // Remove dot segment from the IRI\n    relativeIRI = removeDotSegments(relativeIRI);\n    // Prefix our transformed value with the part of the baseIRI until the first '/' after the first ':'.\n    return baseIRI.substr(0, baseSlashAfterColonPos) + relativeIRI;\n}\nexports.resolve = resolve;\n/**\n * Remove dot segments from the given path,\n * as described in https://www.ietf.org/rfc/rfc3986.txt (page 32).\n * @param {string} path An IRI path.\n * @return {string} A path, will always start with a '/'.\n */\nfunction removeDotSegments(path) {\n    // Prepare a buffer with segments between each '/.\n    // Each segment represents an array of characters.\n    const segmentBuffers = [];\n    let i = 0;\n    while (i < path.length) {\n        // Remove '/.' or '/..'\n        switch (path[i]) {\n            case '/':\n                if (path[i + 1] === '.') {\n                    if (path[i + 2] === '.') {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 3])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Go to parent directory,\n                        // so we remove a parent segment\n                        segmentBuffers.pop();\n                        // Ensure that we end with a slash if there is a trailing '/..'\n                        if (!path[i + 3]) {\n                            segmentBuffers.push([]);\n                        }\n                        i += 3;\n                    }\n                    else {\n                        // Start a new segment if we find an invalid character after the '.'\n                        if (!isCharacterAllowedAfterRelativePathSegment(path[i + 2])) {\n                            segmentBuffers.push([]);\n                            i++;\n                            break;\n                        }\n                        // Ensure that we end with a slash if there is a trailing '/.'\n                        if (!path[i + 2]) {\n                            segmentBuffers.push([]);\n                        }\n                        // Go to the current directory,\n                        // so we do nothing\n                        i += 2;\n                    }\n                }\n                else {\n                    // Start a new segment\n                    segmentBuffers.push([]);\n                    i++;\n                }\n                break;\n            case '#':\n            case '?':\n                // Query and fragment string should be appended unchanged\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path.substr(i));\n                // Break the while loop\n                i = path.length;\n                break;\n            default:\n                // Not a special character, just append it to our buffer\n                if (!segmentBuffers.length) {\n                    segmentBuffers.push([]);\n                }\n                segmentBuffers[segmentBuffers.length - 1].push(path[i]);\n                i++;\n                break;\n        }\n    }\n    return '/' + segmentBuffers.map((buffer) => buffer.join('')).join('/');\n}\nexports.removeDotSegments = removeDotSegments;\n/**\n * Removes dot segments of the given IRI.\n * @param {string} iri An IRI (or part of IRI).\n * @param {number} colonPosition The position of the first ':' in the IRI.\n * @return {string} The IRI where dot segments were removed.\n */\nfunction removeDotSegmentsOfPath(iri, colonPosition) {\n    // Determine where we should start looking for the first '/' that indicates the start of the path\n    let searchOffset = colonPosition + 1;\n    if (colonPosition >= 0) {\n        if (iri[colonPosition + 1] === '/' && iri[colonPosition + 2] === '/') {\n            searchOffset = colonPosition + 3;\n        }\n    }\n    else {\n        if (iri[0] === '/' && iri[1] === '/') {\n            searchOffset = 2;\n        }\n    }\n    // Determine the path\n    const pathSeparator = iri.indexOf('/', searchOffset);\n    if (pathSeparator < 0) {\n        return iri;\n    }\n    const base = iri.substr(0, pathSeparator);\n    const path = iri.substr(pathSeparator);\n    // Remove dot segments from the path\n    return base + removeDotSegments(path);\n}\nexports.removeDotSegmentsOfPath = removeDotSegmentsOfPath;\nfunction isCharacterAllowedAfterRelativePathSegment(character) {\n    return !character || character === '#' || character === '?' || character === '/';\n}\n"},"lineCount":219}},"error":null,"hash":"e9836e718d1039a9f038e633f5714aa1","cacheData":{"env":{}}}
{"id":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","dependencies":[{"name":"/Users/hagereldakroury/Documents/projects/edam2json-demo/package.json","includedInParent":true,"mtime":1625078577814},{"name":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/package.json","includedInParent":true,"mtime":1624342902790},{"name":"./BlankNode","loc":{"line":4,"column":28},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/BlankNode.js"},{"name":"./DefaultGraph","loc":{"line":5,"column":31},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/DefaultGraph.js"},{"name":"./Literal","loc":{"line":6,"column":26},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/Literal.js"},{"name":"./NamedNode","loc":{"line":7,"column":28},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/NamedNode.js"},{"name":"./Quad","loc":{"line":8,"column":23},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/Quad.js"},{"name":"./Variable","loc":{"line":9,"column":27},"parent":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","resolved":"/Users/hagereldakroury/Documents/projects/edam2json-demo/node_modules/edam2json/node_modules/rdf-data-factory/lib/Variable.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}}],"sources":{"node_modules/edam2json/node_modules/rdf-data-factory/lib/DataFactory.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DataFactory = void 0;\nconst BlankNode_1 = require(\"./BlankNode\");\nconst DefaultGraph_1 = require(\"./DefaultGraph\");\nconst Literal_1 = require(\"./Literal\");\nconst NamedNode_1 = require(\"./NamedNode\");\nconst Quad_1 = require(\"./Quad\");\nconst Variable_1 = require(\"./Variable\");\nlet dataFactoryCounter = 0;\n/**\n * A factory for instantiating RDF terms and quads.\n */\nclass DataFactory {\n    constructor(options) {\n        this.blankNodeCounter = 0;\n        options = options || {};\n        this.blankNodePrefix = options.blankNodePrefix || `df_${dataFactoryCounter++}_`;\n    }\n    /**\n     * @param value The IRI for the named node.\n     * @return A new instance of NamedNode.\n     * @see NamedNode\n     */\n    namedNode(value) {\n        return new NamedNode_1.NamedNode(value);\n    }\n    /**\n     * @param value The optional blank node identifier.\n     * @return A new instance of BlankNode.\n     *         If the `value` parameter is undefined a new identifier\n     *         for the blank node is generated for each call.\n     * @see BlankNode\n     */\n    blankNode(value) {\n        return new BlankNode_1.BlankNode(value || `${this.blankNodePrefix}${this.blankNodeCounter++}`);\n    }\n    /**\n     * @param value              The literal value.\n     * @param languageOrDatatype The optional language or datatype.\n     *                           If `languageOrDatatype` is a NamedNode,\n     *                           then it is used for the value of `NamedNode.datatype`.\n     *                           Otherwise `languageOrDatatype` is used for the value\n     *                           of `NamedNode.language`.\n     * @return A new instance of Literal.\n     * @see Literal\n     */\n    literal(value, languageOrDatatype) {\n        return new Literal_1.Literal(value, languageOrDatatype);\n    }\n    /**\n     * This method is optional.\n     * @param value The variable name\n     * @return A new instance of Variable.\n     * @see Variable\n     */\n    variable(value) {\n        return new Variable_1.Variable(value);\n    }\n    /**\n     * @return An instance of DefaultGraph.\n     */\n    defaultGraph() {\n        return DefaultGraph_1.DefaultGraph.INSTANCE;\n    }\n    /**\n     * @param subject   The quad subject term.\n     * @param predicate The quad predicate term.\n     * @param object    The quad object term.\n     * @param graph     The quad graph term.\n     * @return A new instance of Quad.\n     * @see Quad\n     */\n    quad(subject, predicate, object, graph) {\n        return new Quad_1.Quad(subject, predicate, object, graph || this.defaultGraph());\n    }\n    /**\n     * Create a deep copy of the given term using this data factory.\n     * @param original An RDF term.\n     * @return A deep copy of the given term.\n     */\n    fromTerm(original) {\n        // TODO: remove nasty any casts when this TS bug has been fixed:\n        //  https://github.com/microsoft/TypeScript/issues/26933\n        switch (original.termType) {\n            case 'NamedNode':\n                return this.namedNode(original.value);\n            case 'BlankNode':\n                return this.blankNode(original.value);\n            case 'Literal':\n                if (original.language) {\n                    return this.literal(original.value, original.language);\n                }\n                if (!original.datatype.equals(Literal_1.Literal.XSD_STRING)) {\n                    return this.literal(original.value, this.fromTerm(original.datatype));\n                }\n                return this.literal(original.value);\n            case 'Variable':\n                return this.variable(original.value);\n            case 'DefaultGraph':\n                return this.defaultGraph();\n            case 'Quad':\n                return this.quad(this.fromTerm(original.subject), this.fromTerm(original.predicate), this.fromTerm(original.object), this.fromTerm(original.graph));\n        }\n    }\n    /**\n     * Create a deep copy of the given quad using this data factory.\n     * @param original An RDF quad.\n     * @return A deep copy of the given quad.\n     */\n    fromQuad(original) {\n        return this.fromTerm(original);\n    }\n    /**\n     * Reset the internal blank node counter.\n     */\n    resetBlankNodeCounter() {\n        this.blankNodeCounter = 0;\n    }\n}\nexports.DataFactory = DataFactory;\n"},"lineCount":122}},"error":null,"hash":"8b14e7a1c69f6b88ac0130346ee4a3e3","cacheData":{"env":{}}}